@use "sass:list";
@use "sass:math";
@use "sass:meta";
@use "sass:string";


// includes an z-index from an z-index list
// http://www.smashingmagazine.com/2014/06/12/sassy-z-index-management-for-complex-layouts/
// user like this: z-index: z($z-root, header);
@function z($list, $element) {
  $z-index: list.index($list, $element);

  @if $z-index {
    @return $z-index;
  }

  @warn 'There is no item "#{$element}" in this list; choose one of: #{$list}';
  @return null;
}

// Turn numbers with units into unitless numbers: https://github.com/nex3/sass/issues/533
@function clear-units($value) {
  @if meta.type-of($value) == "number" {
    @if  math.is-unitless($value) {
      @return $value;
    } @else if math.unit($value) == "em" {
      @return math.div($value, 1em);
    } @else if math.unit($value) == "px" {
      @return math.div($value, 1px);
    } @else if math.unit($value) == "pt" {
      @return math.div($value, 1pt);
    }
  } @else {
    @warn "Not a number value: #{$value}";
    @return $value;
  }
}

//// function to do the math of pixel to EM conversion. Needs a base-font-size set in _constants.scss
//@function px2em( $pixel, $base-size:constants.$base-font-size ) {
//  // Remove units for easier math.
//  $pixel: clear-units($pixel);
//  $base-size: clear-units($base-size);
//
//  @return #{math.div($pixel, $base-size)}em;
//}
//
//// function to do the math of pixel to REM conversion. Needs a base-font-size set in _constants.scss
//@function px2rem( $pixel, $base-size:constants.$base-font-size ) {
//  // Remove units for easier math.
//  $pixel: clear-units($pixel);
//  $base-size: clear-units($base-size);
//
//  @return #{math.div($pixel, $base-size)}rem;
//}

@function to-string($value) {
  @return meta.inspect($value);
}

// str-replace
// ------------
// by Hugo Giraudel
// Replace `$search` with `$replace` in `$string`
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace + str-replace(string.slice($string, $index + string.length($search)), $search, $replace);
  }

  @return $string;
}

// @mixin aspect-ratio($arglist... /*$width/$ratio, $height*/){
//  $map : keywords($arglist);
//  $height: map-get($map, height) or nth-or-null($arglist, 2);
//  $width:  map-get($map, width)  or nth-or-null($arglist, 1);
//  $ratio:  map-get($map, ratio)  or if($width and $height, $width/$height, nth-or-null($arglist, 1)) or 1;
//  $padding: 1/$ratio * 100%;
//  &:before { content: ''; float:left; padding-bottom: $padding; }
//  &:after  { content: ''; display:table; clear: both; }
//}

// Helper function
// Return null rather than throwing an error if index is outside list range.
@function nth-or-null($list, $index) {
  @return if(list.length($list) >= $index, list.nth($list, $index), null);
}

//  Function to create an optimized svg url, if svg is directly added in sass
//  Example:
//  .bg {
//    background-image: svg-url('<svg ...> ... </svg>');
//  }
// https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
@function svg-url($svg) {
  //  Add missing namespace
  @if not string.index($svg,xmlns) {
    $svg: str-replace($svg, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
  }

  //  Chunk up string in order to avoid
  //  "stack level too deep" error
  $encoded: '';
  $slice: 2000;
  $index: 0;
  $loops: math.ceil(math.div(string.length($svg), $slice));

  @for $i from 1 through $loops {
    $chunk: string.slice($svg, $index, $index + $slice - 1);

    // Encode
    $chunk: str-replace($chunk, '"', '\'');
    $chunk: str-replace($chunk, '%', '%25');
    $chunk: str-replace($chunk, '&', '%26');
    $chunk: str-replace($chunk, '#', '%23');
    $chunk: str-replace($chunk, '{', '%7B');
    $chunk: str-replace($chunk, '}', '%7D');
    $chunk: str-replace($chunk, '<', '%3C');
    $chunk: str-replace($chunk, '>', '%3E');

    //    The maybe list
    //    Keep size and compile time down
    //    ... only add on documented fail
    //  $chunk: str-replace($chunk, '|', '%7C');
    //  $chunk: str-replace($chunk, '[', '%5B');
    //  $chunk: str-replace($chunk, ']', '%5D');
    //  $chunk: str-replace($chunk, '^', '%5E');
    //  $chunk: str-replace($chunk, '`', '%60');
    //  $chunk: str-replace($chunk, ';', '%3B');
    //  $chunk: str-replace($chunk, '?', '%3F');
    //  $chunk: str-replace($chunk, ':', '%3A');
    //  $chunk: str-replace($chunk, '@', '%40');
    //  $chunk: str-replace($chunk, '=', '%3D');

    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }

  @return url("data:image/svg+xml,#{$encoded}");
}

// return svg with color
// Example:
// background-image: functions.svg-icon(icons.$close,color.$red);
@function svg-icon($svg,$color) {
  @return svg-url('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" preserveAspectRatio="xMidYMin slice" ><g fill="#{$color}">#{$svg}</g></svg>');
}


@function fluidSize($value){

  $rfs-base-value: 1.5rem;
  $rfs-unit: rem;

  @if $rfs-unit != rem and $rfs-unit != px {
    @error "`#{$rfs-unit}` is not a valid unit for $rfs-unit. Use `px` or `rem`.";
  }

  // Breakpoint at where values start decreasing if screen width is smaller
  $rfs-breakpoint: 1504px;

  // Resize values based on screen height and width
  $rfs-two-dimensional: false;

  // Factor of decrease
  $rfs-factor: 10;

  @if type-of($rfs-factor) != number or $rfs-factor <= 1 {
    @error "`#{$rfs-factor}` is not a valid  $rfs-factor, it must be greater than 1.";
  }

  // 1 rem = $rfs-rem-value px
  $rfs-rem-value: 16;


  // Cache $rfs-base-value unit
  $rfs-base-value-unit: math.unit($rfs-base-value);

  // Remove px-unit from $rfs-base-value for calculations
  $rfs-base-value-unitless: $rfs-base-value;
  @if $rfs-base-value-unit == px {
    $rfs-base-value-unitless: math.div($rfs-base-value, $rfs-base-value * 0 + 1);
  }
  @else if $rfs-base-value-unit == rem {
    $rfs-base-value-unitless: math.div($rfs-base-value, $rfs-base-value * 0 + math.div(1,$rfs-rem-value));
  }

  // Cache $rfs-breakpoint unit to prevent multiple calls
  $rfs-breakpoint-unit-cache: math.unit($rfs-breakpoint);

  // Remove unit from $rfs-breakpoint for calculations
  @if $rfs-breakpoint-unit-cache == px {
    $rfs-breakpoint: math.div($rfs-breakpoint, $rfs-breakpoint * 0 + 1);
  }
  @else if $rfs-breakpoint-unit-cache == rem or $rfs-breakpoint-unit-cache == "em" {
    $rfs-breakpoint: math.div($rfs-breakpoint, $rfs-breakpoint * 0 + math.div(1,$rfs-rem-value));
  }

  @if $value == 0 {
    @return 0;
  }

  // Cache $value unit
  $unit: if(type-of($value) == "number", unit($value), false);

  // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em), just print the value
  @if not $unit or $unit != px and $unit != rem {
    @return $value;
  }

  // Remove unit from $value for calculations
  $value: math.div($value, $value * 0 + if($unit == px, 1, math.div(1,$rfs-rem-value)));

  // Only add the fluid variable if the value is greater than the minimum value
  @if math.abs($value) <= $rfs-base-value-unitless {
    @return if($rfs-unit == rem, #{math.div($value, $rfs-rem-value)}rem, #{$value}px);
  }

  // Calculate the minimum value
  $value-min: $rfs-base-value-unitless + math.div(math.abs($value) - $rfs-base-value-unitless, $rfs-factor);

  // Calculate difference between $value and the minimum value
  $value-diff: math.abs($value) - $value-min;

  // Base value formatting
  $min-width: if($rfs-unit == rem, #{math.div($value-min, $rfs-rem-value)}rem, #{$value-min}px);

  // Use negative value if needed
  $min-width: if($value < 0, -$min-width, $min-width);

  // Use `vmin` if two-dimensional is enabled
  $variable-unit: if($rfs-two-dimensional, vmin, vw);

  // Calculate the variable width between 0 and $rfs-breakpoint
  $variable-width: #{math.div($value-diff * 100, $rfs-breakpoint)}#{$variable-unit};

  //$value: if($rfs-unit == rem, $value / $rfs-rem-value * 1rem, $value * 1px);
  $value: if($rfs-unit == rem, math.div($value, $rfs-rem-value) * 1rem, $value * 1px);


  // Return the calculated value
  @return string.unquote('clamp('+$rfs-base-value+', calc(' + $min-width + if($value < 0, ' - ', ' + ') + $variable-width + '),'+$value+')');
}
